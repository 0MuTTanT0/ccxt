<?php

namespace ccxtpro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\WebSocketTrait; // websocket functionality

class kraken extends \ccxt\kraken {

    use WebSocketTrait;

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'has' => array (
                'ws' => true,
                'fetchWsTicker' => true,
                'fetchWsOrderBook' => true,
            ),
            'urls' => array (
                'api' => array (
                    'ws' => 'wss://ws.kraken.com',
                    'wsauth' => 'wss://ws-auth.kraken.com',
                    'betaws' => 'wss://beta-ws.kraken.com',
                ),
            ),
            'versions' => array (
                'ws' => '0.2.0',
            ),
            'options' => array (
                'subscriptionStatusByChannelId' => array(),
            ),
        ));
    }

    public function handle_ws_ticker ($client, $response) {
        $data = $response[2];
        $market = $this->safe_value($this->options['marketsByNumericId'], (string) $data[0]);
        $symbol = $this->safe_string($market, 'symbol');
        return array (
            'info' => $response,
            'symbol' => $symbol,
            'last' => floatval ($data[1]),
            'ask' => floatval ($data[2]),
            'bid' => floatval ($data[3]),
            'change' => floatval ($data[4]),
            'baseVolume' => floatval ($data[5]),
            'quoteVolume' => floatval ($data[6]),
            'active' => $data[7] ? false : true,
            'high' => floatval ($data[8]),
            'low' => floatval ($data[9]),
        );
    }

    public function fetch_ws_balance ($params = array ()) {
        $this->load_markets();
        $this->balance = $this->fetchBalance ($params);
        $channelId = '1000';
        $subscribe = array (
            'command' => 'subscribe',
            'channel' => $channelId,
        );
        $messageHash = $channelId . ':b:e';
        $url = $this->urls['api']['ws'];
        return $this->sendWsMessage ($url, $messageHash, $subscribe, $channelId);
    }

    public function fetch_ws_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        // rewrite
        throw new NotImplemented($this->id . 'fetchWsTickers not implemented yet');
        // $market = $this->market (symbol);
        // $numericId = (string) $market['info']['id'];
        // $url = $this->urls['api']['websocket']['public'];
        // return $this->WsTickerMessage ($url, '1002' . $numericId, array (
        //     'command' => 'subscribe',
        //     'channel' => 1002,
        // ));
    }

    public function fetch_ws_trades ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $numericId = $this->safe_string($market, 'numericId');
        $messageHash = $numericId . ':trades';
        $url = $this->urls['api']['ws'];
        $subscribe = array (
            'command' => 'subscribe',
            'channel' => $numericId,
        );
        return $this->sendWsMessage ($url, $messageHash, $subscribe, $numericId);
    }

    public function load_markets ($reload = false, $params = array ()) {
        $markets = parent::load_markets($reload, $params);
        $marketsByWsName = $this->safe_value($this->options, 'marketsByWsName');
        if (($marketsByWsName === null) || $reload) {
            $marketsByWsName = array();
            for ($i = 0; $i < count ($this->symbols); $i++) {
                $symbol = $this->symbols[$i];
                $market = $this->markets[$symbol];
                $info = $this->safe_value($market, 'info', array());
                $wsName = $this->safe_string($info, 'wsname');
                $marketsByWsName[$wsName] = $market;
            }
            $this->options['marketsByWsName'] = $marketsByWsName;
        }
        return $markets;
    }

    public function fetch_ws_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $wsName = $this->safe_value($market['info'], 'wsname');
        $name = 'book';
        $messageHash = $wsName . ':' . $name;
        $url = $this->urls['api']['ws'];
        $subscribe = array (
            'event' => 'subscribe',
            'pair' => array (
                $wsName,
            ),
            'subscription' => array (
                'name' => $name,
            ),
        );
        if ($limit !== null) {
            $subscribe['subscription']['depth'] = $limit; // default 10, valid options 10, 25, 100, 500, 1000
        }
        return $this->sendWsMessage ($url, $messageHash, $subscribe, $messageHash);
    }

    public function fetch_ws_heartbeat ($params = array ()) {
        $this->load_markets();
        $channelId = '1010';
        $url = $this->urls['api']['ws'];
        return $this->sendWsMessage ($url, $channelId);
    }

    public function sign_ws_message ($client, $messageHash, $message, $params = array ()) {
        if (mb_strpos($messageHash, '1000') === 0) {
            $reload = false;
            if ($this->check_required_credentials($reload)) {
                $nonce = $this->nonce ();
                $payload = $this->urlencode (array( 'nonce' => $nonce ));
                $signature = $this->hmac ($this->encode ($payload), $this->encode ($this->secret), 'sha512');
                $message = array_merge ($message, array (
                    'key' => $this->apiKey,
                    'payload' => $payload,
                    'sign' => $signature,
                ));
            }
        }
        return $message;
    }

    public function handle_ws_heartbeat ($client, $message) {
        //
        // every second
        //
        //     array ( 1010 )
        //
        $channelId = '1010';
        $this->resolveWsFuture ($client, $channelId, $message);
    }

    public function parse_ws_trade ($client, $trade, $market = null) {
        //
        // public trades
        //
        //     array (
        //         "t", // $trade
        //         "42706057", // $id
        //         1, // 1 = buy, 0 = sell
        //         "0.05567134", // $price
        //         "0.00181421", // $amount
        //         1522877119, // $timestamp
        //     )
        //
        $id = (string) $trade[1];
        $side = $trade[2] ? 'buy' : 'sell';
        $price = floatval ($trade[3]);
        $amount = floatval ($trade[4]);
        $timestamp = $trade[5] * 1000;
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        return array (
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => null,
            'type' => null,
            'takerOrMaker' => null,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $price * $amount,
            'fee' => null,
        );
    }

    public function handle_ws_order_book ($client, $message) {
        //
        // first $message (snapshot)
        //
        //     array (
        //         0, // channelID
        //         array (
        //             "as" => array (
        //                 array ( "5541.30000", "2.50700000", "1534614248.123678" ),
        //                 array ( "5541.80000", "0.33000000", "1534614098.345543" ),
        //                 array ( "5542.70000", "0.64700000", "1534614244.654432" )
        //             ),
        //             "bs" => array (
        //                 array ( "5541.20000", "1.52900000", "1534614248.765567" ),
        //                 array ( "5539.90000", "0.30000000", "1534614241.769870" ),
        //                 array ( "5539.50000", "5.00000000", "1534613831.243486" )
        //             )
        //         ),
        //         "book-100",
        //         "XBT/USD"
        //     )
        //
        // subsequent updates
        //
        //     array (
        //         1234,
        //         array ( // optional
        //             "$a" => array (
        //                 array ( "5541.30000", "2.50700000", "1534614248.456738" ),
        //                 array ( "5542.50000", "0.40100000", "1534614248.456738" )
        //             )
        //         ),
        //         array ( // optional
        //             "$b" => array (
        //                 array ( "5541.30000", "0.00000000", "1534614335.345903" )
        //             )
        //         ),
        //         "book-10",
        //         "XBT/USD"
        //     )
        //
        $messageLength = is_array ($message) ? count ($message) : 0;
        $wsName = $message[$messageLength - 1];
        $market = $this->safe_value($this->options['marketsByWsName'], $wsName);
        $symbol = $market['symbol'];
        $timestamp = null;
        $messageHash = $wsName . ':book';
        // if this is $a snapshot
        if (is_array($message[1]) && array_key_exists('as', $message[1])) {
            // todo get depth from marketsByWsName
            $this->orderbooks[$symbol] = $this->limitedOrderBook (array(), 10);
            $orderbook = $this->orderbooks[$symbol];
            $sides = array (
                'as' => 'asks',
                'bs' => 'bids',
            );
            $keys = is_array($sides) ? array_keys($sides) : array();
            for ($i = 0; $i < count ($keys); $i++) {
                $key = $keys[$i];
                $side = $sides[$key];
                $bookside = $orderbook[$side];
                $deltas = $this->safe_value($message[1], $key, array());
                $timestamp = $this->handle_ws_deltas ($deltas, $bookside, $timestamp);
            }
            $orderbook['timestamp'] = $timestamp;
            $this->resolveWsFuture ($client, $messageHash, $orderbook->limit ());
        } else {
            $orderbook = $this->orderbooks[$symbol];
            // else, if this is an $orderbook update
            $a = null;
            $b = null;
            if ($messageLength === 5) {
                $a = $this->safe_value($message[1], 'a', array());
                $b = $this->safe_value($message[2], 'b', array());
            } else {
                if (is_array($message[1]) && array_key_exists('a', $message[1])) {
                    $a = $this->safe_value($message[1], 'a', array());
                } else {
                    $b = $this->safe_value($message[1], 'b', array());
                }
            }
            if ($a !== null) {
                $timestamp = $this->handle_ws_deltas ($a, $orderbook['asks'], $timestamp);
            }
            if ($b !== null) {
                $timestamp = $this->handle_ws_deltas ($b, $orderbook['bids'], $timestamp);
            }
            $orderbook['timestamp'] = $timestamp;
            $this->resolveWsFuture ($client, $messageHash, $orderbook->limit ());
        }
    }

    public function handle_ws_deltas ($deltas, $bookside, $timestamp) {
        for ($j = 0; $j < count ($deltas); $j++) {
            $delta = $deltas[$j];
            $price = $delta[0]; // no need to conver the $price here
            $amount = floatval ($delta[1]);
            $timestamp = max ($timestamp || 0, intval ($delta[2] * 1000));
            $bookside->store ($price, $amount);
        }
        return $timestamp;
    }

    public function handle_ws_system_status ($client, $message) {
        //
        //     {
        //         connectionID => 15527282728335292000,
        //         event => 'systemStatus',
        //         status => 'online',
        //         version => '0.2.0'
        //     }
        //
        return $message;
    }

    public function handle_ws_subscription_status ($client, $message) {
        //
        //     {
        //         channelID => 210,
        //         channelName => 'book-10',
        //         event => 'subscriptionStatus',
        //         pair => 'ETH/XBT',
        //         status => 'subscribed',
        //         subscription => array( depth => 10, name => 'book' )
        //     }
        //
        $channelId = $this->safe_string($message, 'channelID');
        $this->options['subscriptionStatusByChannelId'][$channelId] = $message;
    }

    public function handle_ws_message ($client, $message) {
        if (gettype ($message) === 'array' && count (array_filter (array_keys ($message), 'is_string')) == 0) {
            $channelId = (string) $message[0];
            $subscriptionStatus = $this->safe_value($this->options['subscriptionStatusByChannelId'], $channelId);
            if ($subscriptionStatus !== null) {
                $subscription = $this->safe_value($subscriptionStatus, 'subscription', array());
                $name = $this->safe_string($subscription, 'name');
                $methods = array (
                    'book' => 'handleWsOrderBook',
                );
                $method = $this->safe_string($methods, $name);
                if ($method === null) {
                    return $message;
                } else {
                    return $this->$method ($client, $message);
                }
            }
        } else {
            $event = $this->safe_string($message, 'event');
            $methods = array (
                'systemStatus' => 'handleWsSystemStatus',
                'subscriptionStatus' => 'handleWsSubscriptionStatus',
            );
            $method = $this->safe_string($methods, $event);
            if ($method === null) {
                return $message;
            } else {
                return $this->$method ($client, $message);
            }
        }
    }
}
