<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;

class tidex2 extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'tidex2',
            'name' => 'Tidex',
            'countries' => array( 'UK' ),
            'rateLimit' => 2000,
            'version' => '3',
            'userAgent' => null,
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'createMarketOrder' => null,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchCurrencies' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedPositions' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg',
                'api' => array(
                    'web' => 'https://gate.tidex.com/api',
                    'public' => 'https://api.tidex.com/api/v1/public',
                    'private' => 'https://api.tidex.com/api/v1',
                ),
                'www' => 'https://tidex.com',
                'doc' => 'https://gitlab.com/tidex/api/-/blob/main/tidex_doc.md',
                'referral' => 'https://tidex.com/exchange/?ref=57f5638d9cd7',
                'fees' => array(
                    'https://tidex.com/fee-schedule',
                ),
            ),
            'timeframes' => array(
                '15s' => '15',
                '1m' => '60',
                '5m' => '300',
                '15m' => '900',
                '1h' => '3600',
                '4h' => '14400',
                '1d' => '86400',
                '3d' => '259200',
                '1w' => '604800',
            ),
            'api' => array(
                'web' => array(
                    'get' => array(
                        'currency',
                    ),
                ),
                'public' => array(
                    'get' => array(
                        'markets',
                        'tickers',
                        'ticker',
                        'book',
                        'history/result',
                        'symbols',
                        'depth/result',
                        'kline',
                    ),
                ),
                'private' => array(
                    'post' => array(
                        'account/balances',
                        'account/balance',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.002'),
                    'maker' => $this->parse_number('0.002'),
                ),
            ),
            'commonCurrencies' => array(
                'DSH' => 'DASH',
                'EMGO' => 'MGO',
                'MGO' => 'WMGO',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'exceptions' => array(
                'exact' => array(
                ),
                'broad' => array(
                    'Api key header is missing!' => '\\ccxt\\AuthenticationError', // array("code":0,"success":false,"message":"Api key header is missing!","result":array())
                ),
            ),
            'options' => array(
                'fetchTickersMaxLength' => 1000,
            ),
            'orders' => array(), // orders cache / emulation
        ));
    }

    public function fetch_currencies($params = array ()) {
        $response = $this->webGetCurrency ($params);
        //
        //     array(
        //         {
        //             "id":2,
        //             "symbol":"BTC",
        //             "type":2,
        //             "name":"Bitcoin",
        //             "amountPoint":8,
        //             "depositEnable":true,
        //             "depositMinAmount":0.0005,
        //             "withdrawEnable":true,
        //             "withdrawFee":0.0004,
        //             "withdrawMinAmount":0.0005,
        //             "settings":array(
        //                 "Blockchain":"https://blockchair.com/bitcoin/",
        //                 "TxUrl":"https://blockchair.com/bitcoin/transaction/{0}",
        //                 "AddrUrl":"https://blockchair.com/bitcoin/address/{0}",
        //                 "ConfirmationCount":3,
        //                 "NeedMemo":false,
        //                 "ManuallyWithdraw":false
        //             ),
        //             "visible":true,
        //             "isDelisted":false
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $currency = $response[$i];
            $id = $this->safe_string($currency, 'symbol');
            $precision = $this->safe_integer($currency, 'amountPoint');
            $code = $this->safe_currency_code($id);
            $active = $this->safe_value($currency, 'visible');
            $withdrawEnable = $this->safe_value($currency, 'withdrawEnable');
            $depositEnable = $this->safe_value($currency, 'depositEnable');
            $name = $this->safe_string($currency, 'name');
            $fee = $this->safe_number($currency, 'withdrawFee');
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'name' => $name,
                'active' => $active,
                'deposit' => $depositEnable,
                'withdraw' => $withdrawEnable,
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $this->safe_number($currency, 'withdrawMinAmount'),
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => $this->safe_number($currency, 'depositMinAmount'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'fee' => $fee,
                'info' => $currency,
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        $response = $this->publicGetMarkets ($params);
        $markets = $this->safe_value($response, 'result');
        //
        //     {
        //         "code":200,
        //         "success":true,
        //         "message":"",
        //         "result":array(
        //             {
        //                 "name":"BCH_BTC",
        //                 "moneyPrec":8,
        //                 "stock":"BCH",
        //                 "money":"BTC",
        //                 "stockPrec":8,
        //                 "feePrec":8,
        //                 "minAmount":"0.001"
        //             }
        //         )
        //     }
        //
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'name');
            list($baseId, $quoteId) = explode('_', $id);
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $precision = array(
                'amount' => null,
                'price' => $this->safe_integer($market, 'moneyPrec'),
            );
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => null,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'taker' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => $precision,
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'minAmount'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // fetchTicker
        //     {
        //         "name":"YFI_USDT",
        //         "bid":"21607.842223",
        //         "ask":"21635.50514299",
        //         "open":"21530.31",
        //         "high":"22619.38",
        //         "low":"21193.59",
        //         "last":"21644.23",
        //         "volume":"188.4555124",
        //         "deal":"4075612.142786252",
        //         "change":"1"
        //     }
        //
        // fetchTickers
        //     {
        //         "at":1646289676,
        //         "ticker":{
        //             "name":"yfi_usdt",
        //             "bid":"21937.47155034",
        //             "ask":"21966.13380147",
        //             "open":"21449.08",
        //             "high":"22619.38",
        //             "low":"21193.59",
        //             "last":"21968.03",
        //             "vol":"188.4452385",
        //             "deal":"4075398.065557751",
        //             "change":"2"
        //         }
        //     }
        //
        $timestamp = $this->safe_timestamp($ticker, 'at');
        if ($timestamp !== null) {
            $ticker = $this->safe_value($ticker, 'ticker');
        }
        $marketId = $this->safe_string_upper($ticker, 'name');
        $symbol = $this->safe_symbol($marketId, $market);
        $last = $this->safe_string($ticker, 'last');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'buy'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'sell'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => $this->safe_string($ticker, 'avg'),
            'baseVolume' => $this->safe_string($ticker, 'vol_cur'),
            'quoteVolume' => $this->safe_string($ticker, 'vol'),
            'info' => $ticker,
        ), $market, false);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetTickers ($params);
        $result = $this->safe_value($response, 'result');
        //
        //     {
        //         "code":200,
        //         "success":true,
        //         "message":"",
        //         "result":{
        //             "YFI_USDT":{
        //                 "at":1646289676,
        //                 "ticker":{
        //                     "name":"yfi_usdt",
        //                     "bid":"21937.47155034",
        //                     "ask":"21966.13380147",
        //                     "open":"21449.08",
        //                     "high":"22619.38",
        //                     "low":"21193.59",
        //                     "last":"21968.03",
        //                     "vol":"188.4452385",
        //                     "deal":"4075398.065557751",
        //                     "change":"2"
        //                 }
        //             }
        //         }
        //     }
        //
        return $this->parse_tickers($result, $symbols);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        $response = $this->publicGetTicker (array_merge($request, $params));
        $result = $this->safe_value($response, 'result');
        //
        //     {
        //         "code":200,
        //         "success":true,
        //         "message":"",
        //         "result":{
        //             "name":"YFI_USDT",
        //             "bid":"21607.842223",
        //             "ask":"21635.50514299",
        //             "open":"21530.31",
        //             "high":"22619.38",
        //             "low":"21193.59",
        //             "last":"21644.23",
        //             "volume":"188.4555124",
        //             "deal":"4075612.142786252",
        //             "change":"1"
        //         }
        //     }
        //
        return $this->parse_ticker($result, $market);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default = 1, max = 100
        }
        $response = $this->publicGetDepthResult (array_merge($request, $params));
        //
        //     {
        //         "asks":[
        //             ["22064.13194312","0.25742"],
        //         ],
        //         "bids":[
        //             ["22017.12205596","0.11"],
        //         ]
        //     }
        //
        return $this->parse_order_book($response, $symbol);
    }

    public function parse_trade($trade, $market = null) {
        // fetchTrades
        //     {
        //         "tid":135762344,
        //         "date":1646294384,
        //         "price":"21991.91",
        //         "type":"buy",
        //         "amount":"0.0024",
        //         "total":"52.780584"
        //     }
        //
        $timestamp = $this->safe_timestamp($trade, 'date');
        $side = $this->safe_string($trade, 'type');
        $price = $this->safe_string($trade, 'price');
        $amount = $this->safe_string($trade, 'amount');
        $id = $this->safe_string($trade, 'tid');
        $symbol = $this->safe_symbol(null, $market);
        return $this->safe_trade(array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => null,
            'type' => null,
            'takerOrMaker' => null,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => null,
            'fee' => null,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        if ($since === null) {
            $since = 1;
        }
        $market = $this->market($symbol);
        $request = array(
            'market' => $market['id'],
            'since' => $since, // Min 1; Market History Since Selected tid
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // Default 50; min 1; max 1000
        }
        $response = $this->publicGetHistoryResult (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "tid":135762344,
        //             "date":1646294384,
        //             "price":"21991.91",
        //             "type":"buy",
        //             "amount":"0.0024",
        //             "total":"52.780584"
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     {
        //         "time":1646205840,
        //         "open":"21290.48",
        //         "close":"21290.48",
        //         "highest":"21290.48",
        //         "lowest":"21290.48",
        //         "volume":"0",
        //         "amount":"0",
        //         "market":"YFI_USDT"
        //     }
        //
        return array(
            $this->safe_timestamp($ohlcv, 'time'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'highest'),
            $this->safe_number($ohlcv, 'lowest'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'interval' => $this->timeframes[$timeframe],
            'market' => $market['id'],
        );
        $limit = ($limit === null) ? 1501 : $limit;
        if ($since === null) {
            $request['end'] = $this->seconds();
            $request['start'] = $request['end'] - $limit * $this->parse_timeframe($timeframe);
        } else {
            $request['start'] = intval($since / 1000);
            $request['end'] = $this->sum($request['start'], $limit * $this->parse_timeframe($timeframe));
        }
        $response = $this->publicGetKline (array_merge($request, $params));
        $result = $this->safe_value($response, 'result', array());
        $kline = $this->safe_value($result, 'kline', array());
        //
        //     {
        //         "code":200,
        //         "success":true,
        //         "message":"",
        //         "result":{
        //             "market":"YFI_USDT",
        //             "start":1646205797,
        //             "end":1646295857,
        //             "interval":60,
        //             "kline":array(
        //                 {
        //                     "time":1646205840,
        //                     "open":"21290.48",
        //                     "close":"21290.48",
        //                     "highest":"21290.48",
        //                     "lowest":"21290.48",
        //                     "volume":"0",
        //                     "amount":"0",
        //                     "market":"YFI_USDT"
        //                 }
        //             )
        //         }
        //     }
        //
        return $this->parse_ohlcvs($kline, $market, $timeframe, $since, $limit);
    }

    public function parse_balance($response) {
        $balances = $this->safe_value($response, 'return');
        $timestamp = $this->safe_timestamp($balances, 'server_time');
        $result = array(
            'info' => $response,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
        $funds = $this->safe_value($balances, 'funds', array());
        $currencyIds = is_array($funds) ? array_keys($funds) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $code = $this->safe_currency_code($currencyId);
            $balance = $this->safe_value($funds, $currencyId, array());
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'value');
            $account['used'] = $this->safe_string($balance, 'inOrders');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $response = $this->privatePostAccountBalances ($params);
        //
        //     {
        //         "success":1,
        //         "return":array(
        //             "funds":array(
        //                 "btc":array("value":0.0000499885629956,"inOrders":0.0),
        //                 "eth":array("value":0.000000030741708,"inOrders":0.0),
        //                 "tdx":array("value":0.0000000155385356,"inOrders":0.0)
        //             ),
        //             "rights":array(
        //                 "info":true,
        //                 "trade":true,
        //                 "withdraw":false
        //             ),
        //             "transaction_count":0,
        //             "open_orders":0,
        //             "server_time":1619436907
        //         ),
        //         "stat":{
        //             "isSuccess":true,
        //             "serverTime":"00:00:00.0001157",
        //             "time":"00:00:00.0101364",
        //             "errors":null
        //         }
        //     }
        //
        return $this->parse_balance($response);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        if ($type === 'market') {
            throw new ExchangeError($this->id . ' allows limit orders only');
        }
        $amountString = (string) $amount;
        $priceString = (string) $price;
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'pair' => $market['id'],
            'type' => $side,
            'amount' => $this->amount_to_precision($symbol, $amount),
            'rate' => $this->price_to_precision($symbol, $price),
        );
        $response = $this->privatePostTrade (array_merge($request, $params));
        $id = null;
        $status = 'open';
        $filledString = '0.0';
        $remainingString = $amountString;
        $returnResult = $this->safe_value($response, 'return');
        if ($returnResult !== null) {
            $id = $this->safe_string($returnResult, 'order_id');
            if ($id === '0') {
                $id = $this->safe_string($returnResult, 'init_order_id');
                $status = 'closed';
            }
            $filledString = $this->safe_string($returnResult, 'received', $filledString);
            $remainingString = $this->safe_string($returnResult, 'remains', $amountString);
        }
        $timestamp = $this->milliseconds();
        return $this->safe_order(array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $priceString,
            'cost' => null,
            'amount' => $amountString,
            'remaining' => $remainingString,
            'filled' => $filledString,
            'fee' => null,
            // 'trades' => $this->parse_trades(order['trades'], $market),
            'info' => $response,
            'clientOrderId' => null,
            'average' => null,
            'trades' => null,
        ), $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_id' => intval($id),
        );
        return $this->privatePostCancelOrder (array_merge($request, $params));
    }

    public function parse_order_status($status) {
        $statuses = array(
            '0' => 'open',
            '1' => 'closed',
            '2' => 'canceled',
            '3' => 'canceled', // or partially-filled and still open? https://github.com/ccxt/ccxt/issues/1594
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        $id = $this->safe_string($order, 'id');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $timestamp = $this->safe_timestamp($order, 'timestamp_created');
        $marketId = $this->safe_string($order, 'pair');
        $symbol = $this->safe_symbol($marketId, $market);
        $remaining = null;
        $amount = null;
        $price = $this->safe_string($order, 'rate');
        if (is_array($order) && array_key_exists('start_amount', $order)) {
            $amount = $this->safe_string($order, 'start_amount');
            $remaining = $this->safe_string($order, 'amount');
        } else {
            $remaining = $this->safe_string($order, 'amount');
        }
        $fee = null;
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => null,
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'type' => 'limit',
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $this->safe_string($order, 'type'),
            'price' => $price,
            'stopPrice' => null,
            'cost' => null,
            'amount' => $amount,
            'remaining' => $remaining,
            'filled' => null,
            'status' => $status,
            'fee' => $fee,
            'average' => null,
            'trades' => null,
        ), $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_id' => intval($id),
        );
        $response = $this->privatePostOrderInfo (array_merge($request, $params));
        $id = (string) $id;
        $result = $this->safe_value($response, 'return', array());
        $order = $this->safe_value($result, $id);
        return $this->parse_order(array_merge(array( 'id' => $id ), $order));
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        $response = $this->privatePostActiveOrders (array_merge($request, $params));
        //
        //     {
        //         "success":1,
        //         "return":{
        //             "1255468911":array(
        //                 "status":0,
        //                 "pair":"spike_usdt",
        //                 "type":"sell",
        //                 "amount":35028.44256388,
        //                 "rate":0.00199989,
        //                 "timestamp_created":1602684432
        //             }
        //         ),
        //         "stat":{
        //             "isSuccess":true,
        //             "serverTime":"00:00:00.0000826",
        //             "time":"00:00:00.0091423",
        //             "errors":null
        //         }
        //     }
        //
        // it can only return 'open' $orders (i.e. no way to fetch 'closed' $orders)
        $orders = $this->safe_value($response, 'return', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        // some derived classes use camelcase notation for $request fields
        $request = array(
            // 'from' => 123456789, // trade ID, from which the display starts numerical 0 (test result => liqui ignores this field)
            // 'count' => 1000, // the number of $trades for display numerical, default = 1000
            // 'from_id' => trade ID, from which the display starts numerical 0
            // 'end_id' => trade ID on which the display ends numerical ∞
            // 'order' => 'ASC', // sorting, default = DESC (test result => liqui ignores this field, most recent trade always goes last)
            // 'since' => 1234567890, // UTC start time, default = 0 (test result => liqui ignores this field)
            // 'end' => 1234567890, // UTC end time, default = ∞ (test result => liqui ignores this field)
            // 'pair' => 'eth_btc', // default = all markets
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['pair'] = $market['id'];
        }
        if ($limit !== null) {
            $request['count'] = intval($limit);
        }
        if ($since !== null) {
            $request['since'] = intval($since / 1000);
        }
        $response = $this->privatePostTradeHistory (array_merge($request, $params));
        $trades = $this->safe_value($response, 'return', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'asset' => $currency['id'],
            'amount' => floatval($amount),
            'address' => $address,
        );
        if ($tag !== null) {
            $request['memo'] = $tag;
        }
        $response = $this->privatePostCreateWithdraw (array_merge($request, $params));
        //
        //     {
        //         "success":1,
        //         "return":{
        //             "withdraw_id":1111,
        //             "withdraw_info":{
        //                 "id":1111,
        //                 "asset_id":1,
        //                 "asset":"BTC",
        //                 "amount":0.0093,
        //                 "fee":0.0007,
        //                 "create_time":1575128018,
        //                 "status":"Created",
        //                 "data":array(
        //                     "address":"1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY",
        //                     "memo":"memo",
        //                     "tx":null,
        //                     "error":null
        //                 ),
        //             "in_blockchain":false
        //             }
        //         }
        //     }
        //
        $result = $this->safe_value($response, 'return', array());
        return array(
            'info' => $response,
            'id' => $this->safe_string($result, 'withdraw_id'),
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api];
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'private') {
            $this->check_required_credentials();
            $nonce = $this->nonce();
            $body = $this->urlencode(array_merge(array(
                'nonce' => $nonce,
                // 'request' => $path,
                'method' => $path,
            ), $query));
            $signature = $this->hmac($this->encode($body), $this->encode($this->secret), 'sha512');
            $headers = array(
                'Content-Type' => 'application/x-www-form-urlencoded',
                'X-Api-Key' => $this->apiKey,
                'Sign' => $signature,
            );
        } elseif ($api === 'public') {
            $url .= '/' . $this->implode_params($path, $params);
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $url .= '/' . $this->implode_params($path, $params);
            if ($method === 'GET') {
                if ($query) {
                    $url .= '?' . $this->urlencode($query);
                }
            } else {
                if ($query) {
                    $body = $this->json($query);
                    $headers = array(
                        'Content-Type' => 'application/json',
                    );
                }
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return; // fallback to default error handler
        }
        if (is_array($response) && array_key_exists('success', $response)) {
            //
            // 1 - The exchange only returns the integer 'success' key from their private API
            //
            //     array( "success" => 1, ... ) $httpCode === 200
            //     array( "success" => 0, ... ) $httpCode === 200
            //
            // 2 - However, derived exchanges can return non-integers
            //
            //     It can be a numeric string
            //     array( "sucesss" => "1", ... )
            //     array( "sucesss" => "0", ... ), $httpCode >= 200 (can be 403, 502, etc)
            //
            //     Or just a string
            //     array( "success" => "true", ... )
            //     array( "success" => "false", ... ), $httpCode >= 200
            //
            //     Or a boolean
            //     array( "success" => true, ... )
            //     array( "success" => false, ... ), $httpCode >= 200
            //
            // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types
            //
            // 4 - We do not want to copy-paste and duplicate the $code of this handler to other exchanges derived from Liqui
            //
            // To cover points 1, 2, 3 and 4 combined this handler should work like this:
            //
            $success = $this->safe_value($response, 'success', false);
            if (gettype($success) === 'string') {
                if (($success === 'true') || ($success === '1')) {
                    $success = true;
                } else {
                    $success = false;
                }
            }
            if (!$success) {
                $code = $this->safe_string($response, 'code');
                $message = $this->safe_string($response, 'message');
                $feedback = $this->id . ' ' . $body;
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
                $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
                throw new ExchangeError($feedback); // unknown $message
            }
        }
    }
}
