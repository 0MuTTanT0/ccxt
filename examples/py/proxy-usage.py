import os
import sys

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(root + '/python')

# ----------------------------------------------------------------------------

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

# ----------------------------------------------------------------------------
import asyncio
import ccxt.async_support as ccxt  # noqa: E402


# import { kucoin } from '../../js/ccxt.js';
# AUTO-TRANSPILE #
async def example_1():
    my_ex = ccxt.kucoin()
    my_ex.proxy_url = 'https://cors-anywhere.herokuapp.com/'  # It prepends redirect url to requests, so requests leads to call url i.e.: https://cors-anywhere.herokuapp.com/?https://target_url.com . It might be useful for simple redirection or CORS bypassing purposes (Note, this will not work for websocket connections, but only for REST calls).
    # you can also set ".proxyUrlCallback" to callback function with with signature `(url, method, headers, body)` and from there return the proxy url string.
    print(await my_ex.fetch('https://api.ipify.org/'))

    await my_ex.close()

async def example_2():
    my_ex = ccxt.kucoin()
    # same as proxyHttp
    my_ex.proxy_https = 'http://51.83.140.52:11230'  # It sets a real proxy for communication, so calls are made directly to url https://target_url.com , but tunneled through a proxy server (Note, this might work for websocket connections too).
    print(await my_ex.fetch('https://api.ipify.org/'))

    await my_ex.close()

async def example_3():
    my_ex = ccxt.kucoin()
    my_ex.proxy_socks = 'socks5://127.0.0.1:1080'  # It is for socks5 or socks5h proxy (Note, this might work for websocket connections too).
    print(await my_ex.fetch('https://api.ipify.org/'))

    await my_ex.close()

async def example_4():
    my_ex = ccxt.kucoin()
    # for advanced use, set  `meEx.proxyAgentCallback` callback
    my_ex.proxy_agent_callback = my_callback

    await my_ex.close()

def my_callback(url, method, headers, body):
    # in JS it sets .agent property for fetch, in PHP it sets .userAgent, in Python (sync) it returns dict of proxies for `Requests` module, in Python (async) it returns signle proxy entry
    return {}   #



asyncio.run(example_1())
