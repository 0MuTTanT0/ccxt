// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

import aaxRest from '../../aax.js';
import ascendexRest from '../../ascendex.js';
import bequantRest from '../../bequant.js';
import binanceRest from '../../binance.js';
import binancecoinmRest from '../../binancecoinm.js';
import binanceusRest from '../../binanceus.js';
import binanceusdmRest from '../../binanceusdm.js';
import bitcoincomRest from '../../bitcoincom.js';
import bitfinexRest from '../../bitfinex.js';
import bitfinex2Rest from '../../bitfinex2.js';
import bitmartRest from '../../bitmart.js';
import bitmexRest from '../../bitmex.js';
import bitoproRest from '../../bitopro.js';
import bitstampRest from '../../bitstamp.js';
import bittrexRest from '../../bittrex.js';
import bitvavoRest from '../../bitvavo.js';
import bybitRest from '../../bybit.js';
import coinbaseprimeRest from '../../coinbaseprime.js';
import coinbaseproRest from '../../coinbasepro.js';
import coinexRest from '../../coinex.js';
import cryptocomRest from '../../cryptocom.js';
import currencycomRest from '../../currencycom.js';
import exmoRest from '../../exmo.js';
import ftxRest from '../../ftx.js';
import ftxusRest from '../../ftxus.js';
import gateRest from '../../gate.js';
import gateioRest from '../../gateio.js';
import hitbtcRest from '../../hitbtc.js';
import hollaexRest from '../../hollaex.js';
import huobiRest from '../../huobi.js';
import huobijpRest from '../../huobijp.js';
import huobiproRest from '../../huobipro.js';
import idexRest from '../../idex.js';
import krakenRest from '../../kraken.js';
import kucoinRest from '../../kucoin.js';
import mexcRest from '../../mexc.js';
import ndaxRest from '../../ndax.js';
import okcoinRest from '../../okcoin.js';
import okexRest from '../../okex.js';
import okxRest from '../../okx.js';
import phemexRest from '../../phemex.js';
import ripioRest from '../../ripio.js';
import upbitRest from '../../upbit.js';
import whitebitRest from '../../whitebit.js';
import zbRest from '../../zb.js';
import zipmexRest from '../../zipmex.js';
import { WsConnector } from '../base/WsConnector.js';
//
//  automatically generated don't change this manually
//
export class aaxBridge extends aaxRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class ascendexBridge extends ascendexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bequantBridge extends bequantRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class binanceBridge extends binanceRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class binancecoinmBridge extends binancecoinmRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class binanceusBridge extends binanceusRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class binanceusdmBridge extends binanceusdmRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitcoincomBridge extends bitcoincomRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitfinexBridge extends bitfinexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitfinex2Bridge extends bitfinex2Rest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitmartBridge extends bitmartRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitmexBridge extends bitmexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitoproBridge extends bitoproRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitstampBridge extends bitstampRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bittrexBridge extends bittrexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bitvavoBridge extends bitvavoRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class bybitBridge extends bybitRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class coinbaseprimeBridge extends coinbaseprimeRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class coinbaseproBridge extends coinbaseproRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class coinexBridge extends coinexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class cryptocomBridge extends cryptocomRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class currencycomBridge extends currencycomRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class exmoBridge extends exmoRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class ftxBridge extends ftxRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class ftxusBridge extends ftxusRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class gateBridge extends gateRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class gateioBridge extends gateioRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class hitbtcBridge extends hitbtcRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class hollaexBridge extends hollaexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class huobiBridge extends huobiRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class huobijpBridge extends huobijpRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class huobiproBridge extends huobiproRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class idexBridge extends idexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class krakenBridge extends krakenRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class kucoinBridge extends kucoinRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class mexcBridge extends mexcRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class ndaxBridge extends ndaxRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class okcoinBridge extends okcoinRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class okexBridge extends okexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class okxBridge extends okxRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class phemexBridge extends phemexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class ripioBridge extends ripioRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class upbitBridge extends upbitRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class whitebitBridge extends whitebitRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class zbBridge extends zbRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
export class zipmexBridge extends zipmexRest {
    constructor(config = {}) {
        super(config);
        config.handleMessage = this.handleMessage.bind(this);
        config.getEnableRateLimit = this.getEnableRateLimit.bind(this);
        config.getKeepAlive = this.getKeepAlive.bind(this);
        config.getTokenBucket = this.getTokenBucket.bind(this);
        config.getInflate = this.getInflate.bind(this);
        config.getGunzip = this.getGunzip.bind(this);
        config.getVerboseMode = this.getVerboseMode.bind(this);
        config.log = this.log;
        config.ping = this.ping ? this.ping.bind(this) : undefined;
        this.ws = new WsConnector(config);
    }
    handleMessage(client, message) { } // stub to override
}
//---------------------------------------------------------------------
